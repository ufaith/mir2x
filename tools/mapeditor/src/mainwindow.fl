# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <cstdint>} {private local
} 

decl {\#include <ctime>} {private local
} 

decl {\#include <vector>} {public local
} 

decl {\#include <dirent.h>} {public local
} 

decl {\#include <array>} {private local
} 

decl {\#include <map>} {private local
} 

decl {\#include <string>} {private local
} 

decl {\#include <cstring>} {private local
} 

decl {\#include "filesys.hpp"} {private local
} 

decl {\#include "supwarning.hpp"} {private local
} 

decl {\#include "mapinfowindow.hpp"} {private local
} 

decl {\#include "imagedb.hpp"} {private local
} 

decl {\#include "imagecache.hpp"} {private local
} 

decl {\#include "editormap.hpp"} {private local
} 

decl {\#include "hexstring.hpp"} {private local
} 

decl {\#include "animationdraw.hpp"} {private local
} 

decl {\#include <FL/fl_draw.H>} {public local
} 

decl {\#include <FL/Fl_Shared_Image.H>} {public local
} 

decl {\#include "animationselectwindow.hpp"} {private local
} 

class MainWindow {open
} {
  decl {std::string m_WilFilePathName} {private local
  }
  Function {MainWindow()} {open
  } {
    Fl_Window m_Window {
      callback {{
	switch(fl_choice("Quit map editor?", nullptr, " No", " Yes ")){
		case 2  : exit(0); break;
		default :          break;
	}
}} open
      xywh {562 146 985 665} type Double resizable visible
    } {
      Fl_Box m_DrawArea {selected
        xywh {0 20 965 627} resizable
        code0 {\#include "drawarea.hpp"}
        class DrawArea
      }
      Fl_Menu_Bar m_MenuBar {open
        xywh {0 0 993 20} box THIN_UP_BOX labelfont 4 textfont 4
      } {
        Submenu {} {
          label Project open
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label New
            callback {SetWorkingPathName();
fl_alert("%s", "Haven't implement yet!");}
            xywh {0 0 30 20} labelfont 4 divider
          }
          MenuItem {} {
            label {Load Mir2Map}
            callback {{
    // maybe default or setted one, depends
    MakeWorkingFolder();

    extern std::string g_WilFilePathName;
    if(g_WilFilePathName == ""){
        SetWilFilePathName();
    }

    if(g_WilFilePathName != ""){
        LoadMir2Map();
    }
}}
            xywh {0 0 30 20} labelfont 4
            code0 {\#include <string>}
            code1 {\#include <FL/Fl_Native_File_Chooser.H>}
            code2 {\#include <FL/fl_ask.H>}
            code3 {\#include <algorithm>}
          }
          MenuItem {} {
            label {Load Mir2xMap}
            callback {{
    extern std::string g_WilFilePathName;
    if(g_WilFilePathName == ""){
        SetWilFilePathName();
    }

    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Set Map File Path...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                extern std::string g_WorkingPathName;
                g_WorkingPathName = "";
                MakeWorkingFolder();

                std::string szPath = stFileChooser.filename();
                std::replace(szPath.begin(), szPath.end(), '\\\\', '/');

                if(szPath.back() == '/'){
                    szPath += "DESC.BIN";
                }else{
                    szPath += "/DESC.BIN";
                }

                if(FileSys::FileExist(szPath.c_str())){
                    extern EditorMap g_EditorMap;
                    if(!g_EditorMap.LoadMir2xMap(szPath.c_str()) || !g_EditorMap.Valid()){
                        fl_alert("Failed to load Mir2xMap: %s", szPath.c_str());
                    }
                    
                    AfterLoadMir2Map();
                    Fl::remove_timeout(UpdateFrame);
                    Fl::add_timeout(0.5, UpdateFrame);
                    
                }else{
                    fl_alert("Invalid Mir2xMap folder: %s", szPath.c_str());
                }
            }
    }
}}
            xywh {0 0 30 20} shortcut 0x4006f labelfont 4
            code0 {\#include <string>}
            code1 {\#include "editormap.hpp"}
          }
          MenuItem {} {
            label {Load Mir2xMapData}
            callback {{
    extern std::string g_WilFilePathName;
    if(g_WilFilePathName == ""){
        SetWilFilePathName();
    }

    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Set Map File Path...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                extern std::string g_WorkingPathName;
                g_WorkingPathName = "";
                MakeWorkingFolder();

                std::string szPath = stFileChooser.filename();
                std::replace(szPath.begin(), szPath.end(), '\\\\', '/');

                if(szPath.back() == '/'){
                    szPath += "DESC.BIN";
                }else{
                    szPath += "/DESC.BIN";
                }

                if(FileSys::FileExist(szPath.c_str())){
                    extern EditorMap g_EditorMap;
                    if(!g_EditorMap.LoadMir2xMapData(szPath.c_str()) || !g_EditorMap.Valid()){
                        fl_alert("Failed to load Mir2xMapData: %s", szPath.c_str());
                    }
                    
                    AfterLoadMir2Map();
                    Fl::remove_timeout(UpdateFrame);
                    Fl::add_timeout(0.5, UpdateFrame);
                    
                }else{
                    fl_alert("Invalid Mir2xMapData folder: %s", szPath.c_str());
                }
            }
    }
}}
            xywh {10 10 30 20} shortcut 0x4006f labelfont 4 divider
            code0 {\#include <string>}
            code1 {\#include "editormap.hpp"}
          }
          MenuItem {} {
            label {Save Mir2xMap}
            callback {{
    SaveMir2xMap();
}}
            xywh {0 0 30 20} labelfont 4
          }
          MenuItem {} {
            label {Save Mir2xMapData}
            callback {{
    SaveMir2xMapData();
}}
            xywh {10 10 30 20} labelfont 4 divider
          }
          MenuItem {} {
            label {Extract PNG}
            callback {{
    extern EditorMap g_EditorMap;
    if(!g_EditorMap.Valid()){
        return;
    }

    extern std::string g_WorkingPathName;
    if(g_WorkingPathName == ""){
        return;
    }

    auto fnSaveObjPNG = [this](uint8_t nFileIndex, uint16_t nImageIndex, uint32_t nColor){
        extern ImageDB    g_ImageDB;
        extern ImageCache g_ImageCache;
        extern std::string g_WorkingPathName;

        char szHexString[64];
        uint32_t nKey = (((uint32_t)(nFileIndex)) << 16) + ((uint32_t)nImageIndex);
        std::string szIMGPNGName = ((g_WorkingPathName + "/IMG/") + HexString(nKey, szHexString)) + ".PNG";

        if(!FileSys::FileExist(szIMGPNGName.c_str())){
            if(!g_ImageCache.Retrieve(nFileIndex, nImageIndex)){
                if(g_ImageDB.Valid(nFileIndex, nImageIndex)){
                    int nW = g_ImageDB.FastW(nFileIndex);
                    int nH = g_ImageDB.FastH(nFileIndex);
                    g_ImageCache.Register(nFileIndex, nImageIndex,
                            g_ImageDB.FastDecode(nFileIndex, nColor, 0XFFFFFFFF, 0XFFFFFFFF), nW, nH);
                }
            }
        }

       std::string szIMGPNGNameInCache = ((g_ImageCache.Path() + "/CACHE/") + szHexString) + ".PNG";
        if(FileSys::FileExist(szIMGPNGNameInCache.c_str())){
            FileSys::DupFile(szIMGPNGName.c_str(), szIMGPNGNameInCache.c_str());
        }
    };

    auto fnSaveTilePNG = [fnSaveObjPNG](uint8_t nFileIndex, uint16_t nImageIndex){
        fnSaveObjPNG(nFileIndex, nImageIndex, 0XFFFFFFFF);
    };

    g_EditorMap.ExtractTile(fnSaveTilePNG);
    g_EditorMap.ExtractObject(fnSaveObjPNG);
}}
            xywh {10 10 30 20} labelfont 4 divider
            code0 {\#include <string>}
            code1 {\#include <FL/Fl_Native_File_Chooser.H>}
            code2 {\#include "imagecache.hpp"}
            code3 {\#include "imagedb.hpp"}
          }
          MenuItem {} {
            label {Save As}
            xywh {0 0 30 20} shortcut 0x50073 labelfont 4 divider
          }
          MenuItem {} {
            label Quit
            callback {exit(0);}
            xywh {0 0 30 20} shortcut 0x40071 labelfont 4
          }
        }
        Submenu {} {
          label Lines open
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem m_MenuItemGridLine {
            label Grid
            xywh {30 30 30 20} type Toggle labelfont 4
          }
          MenuItem m_MenuItemAttributeGridLine {
            label {Attribute Grid}
            callback {{
	extern AttributeGridWindow *g_AttributeGridWindow;
	if(m_MenuItemAttributeGridLine->value()){
		g_AttributeGridWindow->ShowAll();
	}
}}
            xywh {30 30 30 20} type Toggle labelfont 4 divider
            code0 {\#include "attributegridwindow.hpp"}
          }
          MenuItem m_MenuItemBaseTileLine {
            label {Base Tile}
            xywh {0 0 30 20} type Toggle labelfont 4
          }
          MenuItem m_MenuItemGroundObjectLine {
            label {Ground Object     }
            xywh {10 10 30 20} type Toggle labelfont 4
          }
          MenuItem m_MenuItemOverGroundObjectLine {
            label {Over Ground Object          }
            xywh {20 20 30 20} type Toggle labelfont 4
          }
        }
        Submenu {} {
          label Layers open
          xywh {10 10 62 20} labelfont 4
        } {
          MenuItem m_MenuItemLightLayer {
            label Light
            xywh {10 10 30 20} type Toggle value 1 labelfont 4
          }
          MenuItem m_MenuItemBaseTileLayer {
            label {Base Tile}
            xywh {20 20 30 20} type Toggle value 1 labelfont 4
          }
          MenuItem m_MenuItemGroundObjectLayer {
            label {Ground Object     }
            xywh {20 20 30 20} type Toggle value 1 labelfont 4
          }
          MenuItem m_MenuItemOverGroundObjectLayer {
            label {Over Ground Object          }
            xywh {30 30 30 20} type Toggle value 1 labelfont 4 divider
          }
          MenuItem m_MenuItemClearBackground {
            label {Clear Background         }
            xywh {40 40 30 20} type Toggle value 1 labelfont 4
          }
        }
        Submenu {} {
          label Setting open
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label {Working Folder          }
            callback {{
    SetWorkingPathName();
}}
            xywh {10 10 30 20} labelfont 4
          }
          MenuItem {} {
            label {Wil File Folder      }
            callback {{
    extern std::string g_WorkingPathName;
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Set Map Editing Working Path...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case  1:
            {
                break;
            }
        default:
            {
                g_WorkingPathName = stFileChooser.filename();
                std::replace(g_WorkingPathName.begin(), g_WorkingPathName.end(), '\\\\', '/');
                break;
            }
    }
}}
            xywh {20 20 30 20} labelfont 4
          }
        }
        Submenu {} {
          label Edit open
          xywh {20 20 62 20} labelfont 4
        } {
          MenuItem m_MenuItemEnableEdit {
            label {Enable Edit                    }
            xywh {20 20 30 20} type Toggle labelfont 4
          }
          MenuItem m_MenuItemEditGround {
            label {Edit Ground Info}
            xywh {30 30 30 20} type Toggle labelfont 4 divider
          }
          MenuItem {} {
            label Optimize
            callback {{
    extern EditorMap g_EditorMap;
        if(g_EditorMap.Valid()){
        g_EditorMap.Optimize();
    }
}}
            xywh {40 40 30 20} labelfont 4
            code0 {\#include "editormap.hpp"}
          }
          MenuItem {} {
            label {Map Resize}
            callback {{
    extern CropConfigureWindow *g_CropConfigureWindow;
    g_CropConfigureWindow->ShowAll();
}}
            xywh {50 50 30 20} labelfont 4
            code0 {\#include "cropconfigurewindow.hpp"}
          }
        }
        Submenu {} {
          label Select open
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem m_MenuItemEnableSelect {
            label {Enable Select         }
            xywh {30 30 30 20} type Toggle labelfont 4 divider
          }
          MenuItem m_MenuItemSelectBySingle {
            label Single
            xywh {50 50 30 20} type Radio value 1 labelfont 4
          }
          MenuItem m_MenuItemSelectByRhombus {
            label Rhombus
            xywh {60 60 30 20} type Radio labelfont 4
          }
          MenuItem m_MenuItemSelectByRectangle {
            label Rectangle
            xywh {70 70 30 20} type Radio labelfont 4
          }
          MenuItem m_MenuItemSelectByAttribute {
            label Attribute
            callback {{
	extern AttributeSelectWindow *g_AttributeSelectWindow;
	if(m_MenuItemSelectByAttribute->value()){
		g_AttributeSelectWindow->ShowAll();
	}
}}
            xywh {30 30 30 20} type Radio labelfont 4 divider
            code0 {\#include "attributeselectwindow.hpp"}
          }
          MenuItem m_MenuItemReversed {
            label Reversed
            xywh {10 10 30 20} type Toggle labelfont 4
          }
          MenuItem m_MenuItemDeselect {
            label Deselect
            xywh {20 20 30 20} type Toggle labelfont 4 divider
          }
          MenuItem {} {
            label Settings
            callback {extern SelectSettingWindow *g_SelectSettingWindow;

if(g_SelectSettingWindow){
	g_SelectSettingWindow->ShowAll();
}}
            xywh {30 30 30 20} labelfont 4
            code0 {\#include "selectsettingwindow.hpp"}
          }
        }
        Submenu {} {
          label Test open
          xywh {0 0 70 20}
        } {
          MenuItem m_MenuItemEnableTest {
            label {Enable Test                }
            callback {{
    CenterAnimation();
}}
            xywh {0 0 34 20} type Toggle divider
          }
          MenuItem {} {
            label {Load Animation DB}
            callback {{
    // set test animation db here
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Set Test Animation Database Path...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string szChooseDBPath = stFileChooser.filename();
                std::replace(szChooseDBPath.begin(), szChooseDBPath.end(), '\\\\', '/');

                extern AnimationDB g_AnimationDB;
                if(!g_AnimationDB.Load(szChooseDBPath.c_str())){
                    fl_alert("%s", "Load test animation database failed");
                }

                extern AnimationSelectWindow *g_AnimationSelectWindow;
                g_AnimationSelectWindow->Load();
                g_AnimationSelectWindow->ShowAll();

                break;
            }
    }
}}
            xywh {0 0 34 20}
            code0 {\#include "animationdb.hpp"}
          }
          MenuItem {} {
            label {Configure Animation              }
            callback {{
    extern AnimationSelectWindow *g_AnimationSelectWindow;
    g_AnimationSelectWindow->ShowAll();
}}
            xywh {10 10 34 20}
          }
        }
        Submenu {} {
          label About
          xywh {30 30 62 20} labelfont 4
        } {
          MenuItem {} {
            label {About Me               }
            callback {extern AboutWindow *g_AboutWindow;
g_AboutWindow->ShowAll();}
            xywh {30 30 30 20} labelfont 4
            code0 {\#include "aboutwindow.hpp"}
          }
        }
      }
      Fl_Scrollbar m_VSBar {
        callback {auto pWidget = ((Fl_Valuator *)(m_VSBar)); 
auto fValue  = pWidget->value();

extern EditorMap g_EditorMap;
if(g_EditorMap.Valid()){
	int nValidYOffset = g_EditorMap.H() * 32 - m_DrawArea->h();
	nValidYOffset = (std::max)(0, nValidYOffset);
	int nYOffset = (int)(nValidYOffset * fValue * 1.0);
    	m_DrawArea->SetOffset(0, true, nYOffset, false);
	m_Window->redraw();
}}
        xywh {965 20 20 647} step 0.001
        code0 {\#include "editormap.hpp"}
      }
      Fl_Scrollbar m_SBar {
        callback {auto pWidget = ((Fl_Valuator *)(m_SBar)); 
auto fValue  = pWidget->value();

extern EditorMap g_EditorMap;
if(g_EditorMap.Valid()){
	int nValidXOffset = g_EditorMap.W() * 48 - m_DrawArea->w();
	nValidXOffset = (std::max)(0, nValidXOffset);
	int nXOffset = (int)(nValidXOffset * fValue * 1.0);
    	m_DrawArea->SetOffset(nXOffset, false, 0, true);
	m_Window->redraw();
}}
        xywh {0 647 965 20} type Horizontal labelfont 4 step 0.001
        code0 {\#include "editormap.hpp"}
      }
    }
  }
  Function {ShowAll()} {return_type void
  } {
    code {{
	m_Window->show();
}} {}
  }
  Function {RedrawAll()} {return_type void
  } {
    code {{
	m_Window->redraw();
}} {}
  }
  Function {LoadMir2MapImage()} {return_type void
  } {
    code {{
    extern std::string g_WilFilePathName;
    extern ImageDB     g_ImageDB;
    g_ImageDB.LoadDB(g_WilFilePathName.c_str());
}} {}
  }
  Function {LoadMir2Map()} {return_type void
  } {
    code {{
    extern EditorMap g_EditorMap;

    Fl_Native_File_Chooser fileChooser;
    fileChooser.title("Select .map file");
    fileChooser.type(Fl_Native_File_Chooser::BROWSE_FILE);

    char matchedFileNames[] =
        "MAP\\t*.map\\n"
        ;

    fileChooser.filter(matchedFileNames);
    fileChooser.directory(".");
    switch(fileChooser.show()){
        case -1:
            fl_alert("%s", fileChooser.errmsg());
            break;
        case  1:
            break;
        default:
            {
                if(!g_EditorMap.LoadMir2Map(fileChooser.filename())){
                    fl_alert("Load mir2 map %s failed...", fileChooser.filename());
                }
                
                AfterLoadMir2Map();

                Fl::remove_timeout(UpdateFrame);
                Fl::add_timeout(0.5, UpdateFrame);
            }
            break;
    }
    m_DrawArea->redraw();
}} {}
  }
  Function {AfterLoadMir2Map()} {return_type void
  } {
    code {{
	// previously this function is to set global variables after loading
	// now seems I need to abondon it
	extern MapInfoWindow *g_MapInfoWindow;
	extern EditorMap      g_EditorMap;
	g_MapInfoWindow->Output(g_EditorMap.MapInfo().c_str());
	g_MapInfoWindow->ShowAll();

    m_DrawArea->SetOffset(0, false, 0, false);
    RedrawAll();
}} {}
  }
  Function {SetWorkingPathName()} {return_type void
  } {
    code {{
    // set the work folder
    // default CACHE system locates inside
    extern std::string g_WorkingPathName;
    Fl_Native_File_Chooser stFileChooser;
    
    stFileChooser.title("Set Working Folder...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                g_WorkingPathName = stFileChooser.filename();
                std::replace(g_WorkingPathName.begin(), g_WorkingPathName.end(), '\\\\', '/');
                while(!g_WorkingPathName.empty() && g_WorkingPathName.back() == '/'){
                    g_WorkingPathName.pop_back();
                }
                MakeWorkingFolder();
            }
            break;
    }
}} {}
  }
  Function {SetWilFilePathName()} {return_type void
  } {
    code {{
    extern std::string g_WilFilePathName;
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Set *.wil File Path...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string szOldWilFilePathName = g_WilFilePathName;
                g_WilFilePathName = stFileChooser.filename();
                std::replace(g_WilFilePathName.begin(), g_WilFilePathName.end(), '\\\\', '/');
                if(szOldWilFilePathName != g_WilFilePathName){
                    LoadMir2MapImage();
                    break;
                }
            }
    }
}} {}
  }
  Function {UpdateScrollBar(double fXP, double fYP)} {return_type void
  } {
    code {{
	auto pWidgetX = ((Fl_Valuator *)(m_SBar));
	auto pWidgetY = ((Fl_Valuator *)(m_VSBar));

	fXP = (std::min)(1.0, (std::max)(0.0, fXP));
	fYP = (std::min)(1.0, (std::max)(0.0, fYP));

	pWidgetX->value(pWidgetX->round(fXP));
	pWidgetY->value(pWidgetY->round(fYP));
}} {}
  }
  Function {UpdateFrame(void *)} {return_type {static void}
  } {
    code {{
    extern EditorMap g_EditorMap;
    if(g_EditorMap.Valid()){
        g_EditorMap.UpdateFrame(50);
        extern MainWindow *g_MainWindow;
        g_MainWindow->RedrawAll();
    }
    Fl::repeat_timeout(0.50, UpdateFrame);
}} {}
  }
  Function {UpdateAnimationFrame(void *)} {return_type {static void}
  } {
    code {{
    extern EditorMap g_EditorMap;
    extern MainWindow *g_MainWindow;
    extern AnimationDB g_AnimationDB;
    extern AnimationDraw g_AnimationDraw;
    
    if(g_EditorMap.Valid() && g_AnimationDraw.MonsterID){
        auto &rstRecord = g_AnimationDB.RetrieveAnimation(g_AnimationDraw.MonsterID);
        if(rstRecord.Valid() && rstRecord.DirectionValid(g_AnimationDraw.Action, g_AnimationDraw.Direction)){
            if(rstRecord.FrameValid(g_AnimationDraw.Action, g_AnimationDraw.Direction, g_AnimationDraw.Frame + 1, true) && rstRecord.FrameValid(g_AnimationDraw.Action, g_AnimationDraw.Direction, g_AnimationDraw.Frame + 1, false)){
                g_AnimationDraw.Frame = g_AnimationDraw.Frame + 1;
            }else{
                g_AnimationDraw.Frame = 0;
            }
            
            Fl::repeat_timeout(0.50, UpdateAnimationFrame);
            g_MainWindow->RedrawAll();
            return;
        }
    }
    
    Fl::remove_timeout(UpdateAnimationFrame);
    g_MainWindow->RedrawAll();
}} {}
  }
  Function {ShowBaseTileLine()} {return_type bool
  } {
    code {{
	return m_MenuItemBaseTileLine->value();
}} {}
  }
  Function {ShowGroundObjectLine()} {return_type bool
  } {
    code {{
	return m_MenuItemGroundObjectLine->value();
}} {}
  }
  Function {ShowOverGroundObjectLine()} {return_type bool
  } {
    code {{
	return m_MenuItemOverGroundObjectLine->value();
}} {}
  }
  Function {ShowGridLine()} {return_type bool
  } {
    code {{
	return m_MenuItemGridLine->value();
}} {}
  }
  Function {ShowAttributeGridLine()} {return_type bool
  } {
    code {{
	return m_MenuItemAttributeGridLine->value();
}} {}
  }
  Function {ShowLightLayer()} {return_type bool
  } {
    code {{
	return m_MenuItemLightLayer->value();
}} {}
  }
  Function {ShowBaseTileLayer()} {return_type bool
  } {
    code {{
	return m_MenuItemBaseTileLayer->value();
}} {}
  }
  Function {ShowGroundObjectLayer()} {return_type bool
  } {
    code {{
	return m_MenuItemGroundObjectLayer->value();
}} {}
  }
  Function {ShowOverGroundObjectLayer()} {return_type bool
  } {
    code {{
	return m_MenuItemOverGroundObjectLayer->value();
}} {}
  }
  Function {EnableEdit()} {return_type bool
  } {
    code {{
	return m_MenuItemEnableEdit->value();
}} {}
  }
  Function {EnableSelect()} {return_type bool
  } {
    code {{
	return m_MenuItemEnableSelect->value();
}} {}
  }
  Function {EnableTest()} {return_type bool
  } {
    code {{
    return m_MenuItemEnableTest->value();
}} {}
  }
  Function {SelectByAttribute()} {return_type bool
  } {
    code {{
	return m_MenuItemSelectByAttribute->value();
}} {}
  }
  Function {SelectByRhombus()} {return_type bool
  } {
    code {{
	return m_MenuItemSelectByRhombus->value();
}} {}
  }
  Function {SelectByRectangle()} {return_type bool
  } {
    code {{
	return m_MenuItemSelectByRectangle->value();
}} {}
  }
  Function {SelectBySingle()} {return_type bool
  } {
    code {{
	return m_MenuItemSelectBySingle->value();
}} {}
  }
  Function {MakeWorkingFolder()} {return_type void
  } {
    code {{
    extern std::string g_WorkingPathName;
    if(g_WorkingPathName == "" || (g_WorkingPathName.size() > 0 && g_WorkingPathName[0] == '.')){
        time_t     stRawTime;
        struct tm *stTimeInfo;
        char       szBuffer[64];

        time(&stRawTime);
        stTimeInfo = localtime(&stRawTime);
        strftime(szBuffer, 64, "%Y%m%d%H%M%S", stTimeInfo);
        g_WorkingPathName = std::string("./") + szBuffer;
    }

    FileSys::RemoveDir(g_WorkingPathName.c_str());
    FileSys::MakeDir(g_WorkingPathName.c_str());

    std::string szTmpPath = g_WorkingPathName;
    if(szTmpPath.back() != '/'){
        szTmpPath += "/";
    }
    szTmpPath += "IMG";
    FileSys::MakeDir(szTmpPath.c_str());
}} {}
  }
  Function {SaveMir2xMap()} {return_type void
  } {
    code {{
	extern EditorMap g_EditorMap;
	if(g_EditorMap.Valid()){
		extern std::string g_WorkingPathName;
    		std::string szTmpFileName = g_WorkingPathName;
	
		if(szTmpFileName.back() == '/'){
        		szTmpFileName += "DESC.BIN";
    		}else{
        		szTmpFileName += "/DESC.BIN";
    		}
    		g_EditorMap.SaveMir2xMap(szTmpFileName.c_str());
    		fl_message("Save map file in mir2xmap format successfully!");
    		
	}else{
		fl_alert("%s", "Currently no operating map!");
	}
}} {}
  }
  Function {SaveMir2xMapData()} {open return_type void
  } {
    code {{
	extern EditorMap g_EditorMap;
	if(g_EditorMap.Valid()){
		extern std::string g_WorkingPathName;
    		std::string szTmpFileName = g_WorkingPathName;
	
		if(szTmpFileName.back() == '/'){
        		szTmpFileName += "DESC.BIN";
    		}else{
        		szTmpFileName += "/DESC.BIN";
    		}
    		g_EditorMap.SaveMir2xMapData(szTmpFileName.c_str());
    		fl_message("Save map file in mir2xmapdata format successfully!");
    		
	}else{
		fl_alert("%s", "Currently no operating map!");
	}
}} {}
  }
  Function {ClearBackground()} {return_type bool
  } {
    code {{
    return m_MenuItemClearBackground->value();
}} {}
  }
  Function {Deselect()} {return_type bool
  } {
    code {{
    return m_MenuItemDeselect->value();
}} {}
  }
  Function {Reversed()} {return_type bool
  } {
    code {{
    return m_MenuItemReversed->value();
}} {}
  }
  Function {CenterAnimation()} {return_type void
  } {
    code {{
    extern AnimationDraw g_AnimationDraw;
    if(g_AnimationDraw.MonsterID){
        int nX = m_DrawArea->OffsetX() + m_Window->w() / 2;
        int nY = m_DrawArea->OffsetY() + m_Window->h() / 2;
    
        g_AnimationDraw.X = nX;
        g_AnimationDraw.Y = nY;
    }
}} {}
  }
} 
