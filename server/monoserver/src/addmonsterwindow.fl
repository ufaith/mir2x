# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <utility>} {public global
} 

decl {\#include <cmath>} {public global
} 

decl {\#include <cstdio>} {public global
} 

decl {\#include <cstdlib>} {public global
} 

decl {\#include <vector>} {public global
} 

decl {\#include <Fl/fl_ask.H>} {public global
} 

decl {\#include "monoserver.hpp"} {private local
} 

decl {\#include "sysconst.hpp"} {private local
} 

class AddMonsterWindow {open
} {
  Function {AddMonsterWindow()} {open
  } {
    Fl_Window m_Window {
      label {Add Monster} open
      xywh {504 176 335 260} type Double labelfont 4 modal visible
    } {
      Fl_Choice m_ValidMapList {
        label {Map:} open
        xywh {95 25 180 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
      Fl_Choice m_ValidMonsterList {
        label {Monster:} open
        xywh {95 66 180 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
      Fl_Choice m_ValidMonsterCountList {
        label {Count:} open
        xywh {95 105 180 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
      Fl_Choice m_CurrentMonsterList {
        label {Current:} open
        xywh {95 144 180 25} down_box BORDER_BOX labelfont 4 textfont 4
      } {}
      Fl_Button {} {
        label Refresh
        callback {{
	Refresh();
}}
        xywh {40 211 75 25} labelfont 4
      }
      Fl_Button {} {
        label Add
        xywh {131 211 75 25} labelfont 4
      }
      Fl_Button {} {
        label OK
        callback {{
	m_Window->hide();
}}
        xywh {221 211 75 25} labelfont 4
      }
    }
  }
  Function {ShowAll()} {} {
    code {{
	m_Window->show();
}} {}
  }
  Function {SetMapList()} {return_type void
  } {
    code {{
	m_ValidMapList->clear();
	
	extern MonoServer *g_MonoServer;
    auto stMapList = g_MonoServer->GetActiveMapList();

    if(stMapList.empty()){
        fl_alert("%s", "No valid map currently");
    }else{
        for(auto nMapID: stMapList){
            AddMapList((int)(nMapID), SYS_MAPNAME(nMapID));
        }
    }
}} {}
  }
  Function {SetMonsterList()} {return_type void
  } {
    code {{
	extern MonoServer *g_MonoServer;
	std::vector<uint32_t> stMonsterV;
	
	if(g_MonoServer->GetValidMonsterList((uint32_t)(CurrentMapID()), stMonsterV)){
		for(auto nMonsterID: stMonsterV){
            // fast hack here
			AddMonsterList((int)(nMonsterID), "deer");
		}
	}else{
		fl_alert("%s", "No valid monster for current map");
	}
}} {}
  }
  Function {AddMapList(int nMapID, const char *szMapName)} {return_type void
  } {
    code {{
	// TODO: check for redundancy of the map list
	m_ValidMapList->add(szMapName, 0, OnSelectMap, (void *)((intptr_t)(nMapID)), 0);
}} {}
  }
  Function {AddMonsterList(int nMonsterID, const char *szMonsterName)} {return_type void
  } {
    code {{
	// TODO: check for redundancy of the map list
        m_ValidMonsterList->add(szMonsterName, 0, OnSelectMonster, (void *)((intptr_t)nMonsterID), 0);
}} {}
  }
  Function {OnSelectMap(Fl_Widget *, void *)} {return_type {static void}
  } {
    code {{
	extern AddMonsterWindow *g_AddMonsterWindow;	
	g_AddMonsterWindow->SetMonsterList();
}} {}
  }
  Function {OnSelectMonster(Fl_Widget *, void *)} {return_type {static void}
  } {
    code {{
	extern AddMonsterWindow *g_AddMonsterWindow;	
	g_AddMonsterWindow->SetMonsterCountList();
}} {}
  }
  Function {Refresh()} {return_type void
  } {
    code {{
	SetMapList();
}} {}
  }
  Function {SetMonsterCountList()} {return_type void
  } {
    code {{
	extern MonoServer *g_MonoServer;
	int nValidCount = g_MonoServer->GetValidMonsterCount(CurrentMapID(), CurrentMonsterID());
		
	m_ValidMonsterCountList->clear();
	
	for(int nCnt = 0; nCnt <= nValidCount; ++nCnt){
	  m_ValidMonsterCountList->add(std::to_string(nCnt).c_str(), 0, nullptr, (void *)((intptr_t)nCnt), 0);
	}
}} {}
  }
  Function {CurrentMapID()} {return_type int
  } {
    code {{
	return (int)(intptr_t)(m_ValidMapList->mvalue()->user_data());
}} {}
  }
  Function {CurrentMonsterID()} {return_type int
  } {
    code {{
	return (int)(intptr_t)(m_ValidMonsterList->mvalue()->user_data());
}} {}
  }
} 
